@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Html
@namespace KSBlazor.Components

<!--Pagination-->
<nav aria-label="Page navigation" class="@ParentNavCssClass">
    <ul class="@ParentUlCssClass">
        @if (HasPreviousButton)
        {
            <li class="@PreviousLiCssClass">
                <button @onclick="() => OnSelectedPage(1)" class="@PreviousAnchorCssClass" aria-label="Previous">
                    <i class="@PreviousIconClass"></i>
                </button>
            </li>
        }
        
        @for (int i = 1; i <= PageInfo.TotalPages; i++)
        {
            @if (i == PageInfo.CurrentPage)
            {
                <li class="@ActiveLiClass">
                    <button @onclick="() => OnSelectedPage(pagesNumber[i - 1])" class="@ActiveAnchorClass">@i</button>
                </li>
            }
            else
            {
                <li class="@PagesLiClass">
                    <button @onclick="() => OnSelectedPage(pagesNumber[i - 1])" class="@PagesAnchorClass">@i</button>
                </li>
            }

        }
        
        @if (HasNextButton)
        {
            <li class="@NextLiCssClass">
                <buttun @onclick="() => OnSelectedPage(PageInfo.TotalPages)" class="@NextAnchorCssClass" aria-label="Next">
                    <i class="@NextIconClass"></i>
                </buttun>
            </li>
        }
    </ul>
</nav>
<!--End of Pagination-->

@code {
    #region Parameters
    [Parameter] public PagingInfo PageInfo { get; set; }
    [Parameter] public string ParentNavCssClass { get; set; }
    [Parameter] public string ParentUlCssClass { get; set; }
    [Parameter] public string PreviousLiCssClass { get; set; }
    [Parameter] public string PreviousAnchorCssClass { get; set; }
    [Parameter] public string PreviousIconClass { get; set; }
    [Parameter] public bool HasPreviousButton { get; set; }
    [Parameter] public string NextLiCssClass { get; set; }
    [Parameter] public string NextAnchorCssClass { get; set; }
    [Parameter] public string NextIconClass { get; set; }
    [Parameter] public bool HasNextButton { get; set; }
    [Parameter] public string PagesLiClass { get; set; }
    [Parameter] public string PagesAnchorClass { get; set; }
    [Parameter] public string ActiveLiClass { get; set; }
    [Parameter] public string ActiveAnchorClass { get; set; }
    [Parameter] public string PageUrl { get; set; }
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    
    private int[] pagesNumber { get; set; }
    #endregion

    protected override void OnInitialized()
    {
        for (var i = 1; i <= PageInfo.TotalPages; i++)
        {
            pagesNumber[i - 1] = i;
        }
    }

    private async Task OnSelectedPage(int pageIndex)
    {
        await SelectedPage.InvokeAsync(pageIndex);
    }
 
    public static string AnchorInnerHtml(int i, PagingInfo pagingInfo)
    {
        string anchorInnerHtml = "";
        if (pagingInfo.TotalPages <= 10)
            anchorInnerHtml = i.ToString();
        else
        {
            if (pagingInfo.CurrentPage <= 5)
            {
                if ((i <= 8) || (i == pagingInfo.TotalPages))
                    anchorInnerHtml = i.ToString();
                else if (i == pagingInfo.TotalPages - 1)
                    anchorInnerHtml = "..";
            }
            else if ((pagingInfo.CurrentPage > 5) && (pagingInfo.TotalPages - pagingInfo.CurrentPage >= 5))
            {
                if ((i == 1) || (i == pagingInfo.TotalPages) || ((pagingInfo.CurrentPage - i >= -3) && (pagingInfo.CurrentPage - i <= 3)))
                    anchorInnerHtml = i.ToString();
                else if ((i == pagingInfo.CurrentPage - 4) || (i == pagingInfo.CurrentPage + 4))
                    anchorInnerHtml = "..";
            }
            else if (pagingInfo.TotalPages - pagingInfo.CurrentPage < 5)
            {
                if ((i == 1) || (pagingInfo.TotalPages - i <= 7))
                    anchorInnerHtml = i.ToString();
                else if (pagingInfo.TotalPages - i == 8)
                    anchorInnerHtml = "..";
            }
        }
        return anchorInnerHtml;
    }
}