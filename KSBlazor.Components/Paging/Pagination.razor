@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Html
@namespace KSBlazor.Components

<style>
    .pagingDiv {
        background: #f2f2f2;
        display: flex;
    }
 
        .pagingDiv > a {
            display: inline-block;
            padding: 0px 9px;
            margin-right: 4px;
            border-radius: 3px;
            border: solid 1px #c0c0c0;
            background: #e9e9e9;
            box-shadow: inset 0px 1px 0px rgba(255,255,255, .8), 0px 1px 3px rgba(0,0,0, .1);
            font-size: .875em;
            font-weight: bold;
            text-decoration: none;
            color: #717171;
            text-shadow: 0px 1px 0px rgba(255,255,255, 1);
        }
 
            .pagingDiv > a:hover {
                background: #fefefe;
                background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(#FEFEFE), to(#f0f0f0));
                /*background: -moz-linear-gradient(0% 0% 270deg,#FEFEFE, #f0f0f0);*/
            }
 
            .pagingDiv > a.active {
                border: none;
                background: #616161;
                box-shadow: inset 0px 0px 8px rgba(0,0,0, .5), 0px 1px 0px rgba(255,255,255, .8);
                color: #f0f0f0;
                text-shadow: 0px 0px 3px rgba(0,0,0, .5);
            }
</style>
 
<nav aria-label="Page navigation" class="@ParentNavCssClass">
    <ul class="@ParentUlCssClass">
        @((MarkupString)CreatePaging())
    </ul>
</nav>

@code {
    #region Parameters
    [Parameter] public PagingInfo PageInfo { get; set; }
    [Parameter] public string ParentNavCssClass { get; set; }
    [Parameter] public string ParentUlCssClass { get; set; }
    [Parameter] public string PreviousLiCssClass { get; set; }
    [Parameter] public string PreviousAnchorCssClass { get; set; }
    [Parameter] public string PreviousIconClass { get; set; }
    [Parameter] public bool HasPreviousButton { get; set; }
    [Parameter] public string NextLiCssClass { get; set; }
    [Parameter] public string NextAnchorCssClass { get; set; }
    [Parameter] public string NextIconClass { get; set; }
    [Parameter] public bool HasNextButton { get; set; }
    [Parameter] public string PagesLiClass { get; set; }
    [Parameter] public string PagesAnchorClass { get; set; }
    [Parameter] public string ActiveLiClass { get; set; }
    [Parameter] public string ActiveAnchorClass { get; set; }
    [Parameter] public string PageUrl { get; set; }
    #endregion
 
    public string CreatePaging()
    {
        var pageUrl = $"{PageUrl}/{PageInfo.CurrentPage}?";
        if (PageInfo.SearchTerm != null)
            pageUrl += $"search={PageInfo.SearchTerm}";
        if (PageInfo.OrderByProperty != null)
            pageUrl += $"&orderby={PageInfo.OrderByProperty}";
        if (PageInfo.Descending != null)
            pageUrl += $"&descending={PageInfo.Descending}";
        
        TagBuilder result = new("ul");
        result.AddCssClass(ParentUlCssClass);
        if (HasPreviousButton)
        {
            TagBuilder previousPageLi = new("li");
            previousPageLi.AddCssClass(PreviousLiCssClass);
            TagBuilder previousAnchor = new("a");
            
            previousAnchor.Attributes["href"] = pageUrl;
            previousAnchor.AddCssClass(PreviousAnchorCssClass);
            TagBuilder previousIcon = new("i");
            previousIcon.AddCssClass(PreviousIconClass);
            previousAnchor.InnerHtml.AppendHtml(previousIcon);
            previousPageLi.InnerHtml.AppendHtml(previousAnchor);
            result.InnerHtml.AppendHtml(previousPageLi);
        }

        string anchorInnerHtml = "";
 
        for (int i = 1; i <= PageInfo.TotalPages; i++)
        {
            TagBuilder pageLi = new("li");
            TagBuilder pageAnchor = new TagBuilder("a");
            anchorInnerHtml = AnchorInnerHtml(i, PageInfo);
            
            if (anchorInnerHtml == "..")
                pageAnchor.Attributes["href"] = "#";
            else if (i == 1)
                pageAnchor.Attributes["href"] = PageUrl;
            else
                pageAnchor.Attributes["href"] = pageUrl;
 
            if (i == PageInfo.CurrentPage)
            {
                pageLi.AddCssClass(ActiveLiClass);
                pageAnchor.AddCssClass(ActiveAnchorClass);
            }
            else
            {
                pageLi.AddCssClass(PagesLiClass);
                pageAnchor.AddCssClass(PagesAnchorClass);
            }

            pageAnchor.InnerHtml.Append(anchorInnerHtml);
            pageLi.InnerHtml.AppendHtml(pageAnchor);
 
            if (anchorInnerHtml != "")
                result.InnerHtml.AppendHtml(pageLi);
        }
        
        if (HasNextButton)
        {
            TagBuilder nextPageLi = new("li");
            nextPageLi.AddCssClass(NextLiCssClass);
            TagBuilder nextAnchor = new("a");
            
            nextAnchor.Attributes["href"] = pageUrl;
            nextAnchor.AddCssClass(NextAnchorCssClass);
            TagBuilder nextIcon = new("i");
            nextIcon.AddCssClass(NextIconClass);
            nextAnchor.InnerHtml.AppendHtml(nextIcon);
            nextPageLi.InnerHtml.AppendHtml(nextAnchor);
            result.InnerHtml.AppendHtml(nextPageLi);
        }
 
        System.IO.StringWriter writer = new System.IO.StringWriter();
        result.InnerHtml.WriteTo(writer, System.Text.Encodings.Web.HtmlEncoder.Default);
        return writer.ToString();
    }
 
    public static string AnchorInnerHtml(int i, PagingInfo pagingInfo)
    {
        string anchorInnerHtml = "";
        if (pagingInfo.TotalPages <= 10)
            anchorInnerHtml = i.ToString();
        else
        {
            if (pagingInfo.CurrentPage <= 5)
            {
                if ((i <= 8) || (i == pagingInfo.TotalPages))
                    anchorInnerHtml = i.ToString();
                else if (i == pagingInfo.TotalPages - 1)
                    anchorInnerHtml = "..";
            }
            else if ((pagingInfo.CurrentPage > 5) && (pagingInfo.TotalPages - pagingInfo.CurrentPage >= 5))
            {
                if ((i == 1) || (i == pagingInfo.TotalPages) || ((pagingInfo.CurrentPage - i >= -3) && (pagingInfo.CurrentPage - i <= 3)))
                    anchorInnerHtml = i.ToString();
                else if ((i == pagingInfo.CurrentPage - 4) || (i == pagingInfo.CurrentPage + 4))
                    anchorInnerHtml = "..";
            }
            else if (pagingInfo.TotalPages - pagingInfo.CurrentPage < 5)
            {
                if ((i == 1) || (pagingInfo.TotalPages - i <= 7))
                    anchorInnerHtml = i.ToString();
                else if (pagingInfo.TotalPages - i == 8)
                    anchorInnerHtml = "..";
            }
        }
        return anchorInnerHtml;
    }
}